
#include"bptree.h"
#include"lsmtree.h"
#include"skiplist.h"
#include"measure.h"
#include"queue.h"
#include"threading.h"
#include"LR_inter.h"


#include<time.h>
#include<pthread.h>
#include<string.h>
#include<stdio.h>
#include<stdlib.h>
#include<fcntl.h>
#include<semaphore.h>
#include<sys/time.h>

#ifdef ENABLE_LIBFTL
#include "libmemio.h"
memio_t* mio;
#endif

extern KEYT ppa;

#ifdef THREAD
extern threadset processor;
pthread_mutex_t merge_lock;
pthread_mutex_t sst_lock;
/*
0: memtable
1~LEVELN : level
LEVELN+1=last
*/
pthread_mutex_t level_read_lock[LEVELN+2];
pthread_mutex_t level_write_lock[LEVELN+2];
uint32_t readcnt[LEVELN+2];
#endif
void level_read_locking(int level){
	pthread_mutex_lock(&level_read_lock[level]);
	readcnt[level]++;
	if(readcnt[level]==1)
		pthread_mutex_lock(&level_write_lock[level]);
	pthread_mutex_unlock(&level_read_lock[level]);
}
void level_read_unlocking(int level){
	pthread_mutex_lock(&level_read_lock[level]);
	readcnt[level]--;
	if(readcnt[level]==0)
		pthread_mutex_unlock(&level_write_lock[level]);
	pthread_mutex_unlock(&level_read_lock[level]);
}

void level_write_locking(int level){
	pthread_mutex_lock(&level_write_lock[level]);
}

void level_write_unlocking(int level){
	pthread_mutex_unlock(&level_write_lock[level]);
}

int write_data(lsmtree *LSM,skiplist *data,Entry *res){
	skiplist_data_write(data,LSM->dfd);
	return skiplist_meta_write(data,LSM->dfd);
}
int write_meta_only(lsmtree *LSM, skiplist *data){
	snode *check=data->header->list[1];
	return skiplist_meta_write(data,LSM->dfd);
}
lsmtree* init_lsm(lsmtree *res){
	pthread_mutex_init(&merge_lock,NULL);
	pthread_mutex_init(&sst_lock,NULL);
	for(int i=0; i<LEVELN+2; i++){
		pthread_mutex_init(&level_read_lock[i],NULL);
		pthread_mutex_init(&level_write_lock[i],NULL);
	}
	res->memtree=(skiplist*)malloc(sizeof(skiplist));
	res->memtree=skiplist_init(res->memtree);
	res->buf.data=NULL;
	res->sstable=NULL;
	for(int i=0;i<LEVELN; i++){
		res->buf.disk[i]=NULL;
		res->buf.lastB=NULL;
	}
#if !defined(ENABLE_LIBFTL)
	if(SEQUENCE){
		res->dfd=open("data/skiplist_data.skip",O_RDWR|O_CREAT|O_TRUNC,0666);
	}
	else{
		res->dfd=open("data/skiplist_data_r.skip",O_RDWR|O_CREAT|O_TRUNC,0666);
	}
	if(res->dfd==-1){
		printf("file open error!\n");
		return NULL;
	}
#endif
#ifdef ENABLE_LIBFTL
	if ( (mio = memio_open() ) == NULL ) {
		printf("memio_open() failed\n");
		return NULL;
	}
#endif
	return res;
}
void buffer_free(buffer *buf){
	free(buf->data);
	for(int i=0; i<LEVELN; i++){
		if(buf->disk[i]!=NULL) level_free(buf->disk[i]);
	}
	if(buf->lastB!=NULL)
		skiplist_meta_free(buf->lastB);
}

void lsm_free(lsmtree *input){
	pthread_mutex_destroy(&merge_lock);	
	pthread_mutex_destroy(&sst_lock);
	for(int i=0; i<LEVELN+2; i++){
		pthread_mutex_destroy(&level_read_lock[i]);
		pthread_mutex_destroy(&level_write_lock[i]);
	}
	skiplist_free(input->memtree);
	if(input->sstable!=NULL)
		skiplist_free(input->sstable);
	buffer_free(&input->buf);
#if !defined(ENABLE_LIBFTL)
	close(input->dfd);
#endif
#ifdef ENABLE_LIBFTL
	memio_close(mio);
#endif
	free(input);
}
void lsm_clear(lsmtree *input){
	skiplist_free(input->memtree);
	input->memtree=(skiplist*)malloc(sizeof(skiplist));
	input->memtree=skiplist_init(input->memtree);
}
bool put(lsmtree *LSM,KEYT key, char *value){
	if(key==0)
		printf("key is 0!\n");
	while(1){
		level_write_locking(0);
		if(LSM->memtree->size<KEYN){
			skiplist_insert(LSM->memtree,key,value,true);
			level_write_unlocking(0);
			return true;
		}
		else{
			pthread_mutex_lock(&sst_lock);
			LSM->sstable=LSM->memtree;
			pthread_mutex_unlock(&sst_lock);
			LSM->memtree=(skiplist*)malloc(sizeof(skiplist));
			LSM->memtree=skiplist_init(LSM->memtree);
			level_write_unlocking(0);
			uint8_t *type=(uint8_t*)malloc(sizeof(uint8_t));
			*type=LR_MERGE_T;
			KEYT *level=(KEYT*)malloc(sizeof(KEYT));
			*level=0;
			lsmtree_req_t *req=(lsmtree_req_t*)malloc(sizeof(lsmtree_req_t));
			req->req=NULL;
			req->params[0]=(void*)type;
			req->params[1]=(void*)level;
			req->params[2]=(void*)LSM->sstable;
			req->params[3]=(void*)LSM;
			req->end_req=lr_end_req;
			threadset_gc_assign(&processor,req);
		}
	}
	return false;
}
int thread_get(lsmtree *LSM, KEYT key, threading *input, char *ret){
	int tempidx=0;
	
	level_read_locking(0);
	snode* res=skiplist_find(LSM->memtree,key);
	if(res!=NULL){
		memcpy(ret,&res->key,sizeof(res->key));
		level_read_unlocking(0);
		return 1;
	}
	level_read_unlocking(0);
	
	pthread_mutex_lock(&sst_lock);
	res=NULL;
	res=skiplist_find(LSM->sstable,key);
	if(res!=NULL){
		memcpy(ret,&res->key,sizeof(res->key));
		pthread_mutex_unlock(&sst_lock);
		return 1;
	}
	pthread_mutex_unlock(&sst_lock);
/*
	if(input->buf_data!=NULL){
		if(skiplist_keyset_read(skiplist_keyset_find(input->buf_data,key),ret,LSM->dfd)){
			return 1;	
		}
	}
*/
	for(int i=0; i<LEVELN; i++){
		level_read_locking(i+1);

		if(LSM->buf.disk[i]!=NULL){
			Entry *temp=level_find(LSM->buf.disk[i],key);
			if(temp==NULL) continue;
			sktable *readed=skiplist_meta_read(temp->pbn,LSM->dfd);
			if(skiplist_keyset_read(skiplist_keyset_find(readed,key),ret,LSM->dfd)){
				if(input->buf_data!=NULL){
					free(input->buf_data);
				}
				input->buf_data=readed;	
				level_read_unlocking(i+1);
				return 1;
			}
			free(readed);
		}
		level_read_unlocking(i+1);
	}

	res=NULL;
	level_read_locking(LEVELN+1);
	res=skiplist_find(LSM->buf.lastB,key);
	if(res!=NULL){
		keyset read_temp;
		read_temp.key=res->key;
		read_temp.ppa=res->ppa;
		skiplist_keyset_read(&read_temp,ret,LSM->dfd);
		level_read_unlocking(LEVELN+1);
		return 1;
	}
	level_read_unlocking(LEVELN+1);
	return 0;

}

int get(lsmtree *LSM,KEYT key,char *ret){
	int tempidx=0;
	snode* res=skiplist_find(LSM->memtree,key);
	if(res!=NULL){
		memcpy(ret,res->value,PAGESIZE);
		return 1;
	}

	if(LSM->buf.data!=NULL){
		if(skiplist_keyset_read(skiplist_keyset_find(LSM->buf.data,key),ret,LSM->dfd)){
			return 1;	
		}
	}

	for(int i=0; i<LEVELN; i++){
		if(LSM->buf.disk[i]!=NULL){
			Entry *temp=level_find(LSM->buf.disk[i],key);
			if(temp==NULL) continue;
			sktable *readed=skiplist_meta_read(temp->pbn,LSM->dfd);
			if(skiplist_keyset_read(skiplist_keyset_find(readed,key),ret,LSM->dfd)){
				if(LSM->buf.data!=NULL){
					free(LSM->buf.data);
				}
				LSM->buf.data=readed;	
				return 1;
			}
			free(readed);
		}
		else
			break;
	}

	res=NULL;
	res=skiplist_find(LSM->buf.lastB,key);
	if(res!=NULL){
		keyset read_temp;
		read_temp.key=res->key;
		read_temp.ppa=res->ppa;
		skiplist_keyset_read(&read_temp,ret,LSM->dfd);
		return 1;
	}
	return 0;
}
lsmtree* lsm_reset(lsmtree* input){
	input->memtree=(skiplist*)malloc(sizeof(skiplist));
	input->memtree=skiplist_init(input->memtree);
	return input;
}
bool compaction(lsmtree *LSM,level *src, level *des,skiplist *memtree){
	Entry *target;
	if(src==NULL && memtree!=NULL){
		target=make_entry(memtree->start,memtree->end,write_data(LSM,memtree));
	}
	else{
		target=level_get_victim(src);
		Entry *target2=level_entry_copy(target);
		level_write_locking(src->number);
		level_delete(src,target->key);
		level_write_unlocking(src->number);
		target=target2;
	}

	skiplist *last=LSM->buf.lastB;
	if(last==NULL){
		last=(skiplist*)malloc(sizeof(skiplist));
		skiplist_init(last);
	}
	level_read_locking(des->number);
	Entry **iter=level_range_find(des,target->key,target->end);
	level_read_unlocking(des->number);

	Entry *temp;
	bool check_getdata=false;
	KEYT *version=NULL;
	KEYT *delete_set=NULL;
	int versionIdx=0;
	if(iter!=NULL){
		version=(KEYT*)malloc(sizeof(KEYT)*(des->m_size));
		delete_set=(KEYT*)malloc(sizeof(KEYT)*(des->m_size));
		int allnumber=0;
		for(int i=0; iter[i]!=NULL; i++) allnumber++;
		processor.sk_target_number=allnumber;
		processor.sk_now_number=0;
		for(int i=0; iter[i]!=NULL ;i++){
			uint8_t *type=(uint8_t*)malloc(sizeof(uint8_t));
			*type=LR_COMP_T;
			temp=iter[i];
			check_getdata=true;
			version[versionIdx]=temp->version;
			delete_set[versionIdx++]=temp->key;
			lsmtree_req_t *req=(lsmtree_req_t*)malloc(sizeof(lsmtree_req_t));
			req->req=NULL;
			req->params[0]=(void*)type;
			req->params[1]=(void*)&temp->pbn;
			req->params[2]=NULL;
			req->params[3]=(void*)LSM;
			req->end_req=lr_gc_end_req;
			threadset_assign(&processor,req);
		}
		for(int i=0; i<allnumber; i++){
			sktable *sk=sk_from_ths(&processor);
			level_write_locking(LEVELN+1);
			for(int j=0; j<KEYN; j++){
				snode *temp_s=skiplist_insert(last,sk->meta[j].key,NULL,true);
				temp_s->ppa=sk->meta[j].ppa;
			}
			level_write_unlocking(LEVELN+1);
			free(sk);
		}
		free(iter);
	}

	if(!check_getdata){
		level_write_locking(des->number);
		level_insert(des,target);
		level_write_unlocking(des->number);
	}
	else{
		sktable *sk=skiplist_meta_read(target->pbn,LSM->dfd);
		level_write_locking(LEVELN+1);
		for(int i=0; i<KEYN; i++){
			snode *temp_s=skiplist_insert(last,sk->meta[i].key,NULL,true);
			temp_s->ppa=sk->meta[i].ppa;
		}
		level_write_unlocking(LEVELN+1);
		free(sk);
		free(target);

		int getIdx=0;
		skiplist *t;
		level_write_locking(des->number);
		for(int i=0; i<versionIdx; i++){
			level_delete(des,delete_set[i]);
		}
		level_write_unlocking(des->number);

		level_write_locking(LEVELN+1);
		level_write_locking(des->number);
		while((t=skiplist_cut(last,KEYN))){
			temp=make_entry(t->start, t->end,write_meta_only(LSM,t));
			if(getIdx<versionIdx){
				temp->version=version[getIdx++];
			}
			level_insert(des,temp);
			if(temp->key==0)
				sleep(10);
			skiplist_meta_free(t);
		}
		level_write_unlocking(des->number);
		level_write_unlocking(LEVELN+1);
	}

	if(delete_set!=NULL){
		free(delete_set);
	}
	if(version!=NULL){
		free(version);
	}
	LSM->buf.lastB=last;
	if(memtree!=NULL){
		pthread_mutex_lock(&sst_lock);
		skiplist_free(memtree);
		LSM->sstable=NULL;
		pthread_mutex_unlock(&sst_lock);
	}
	return true;
}
bool merge(lsmtree *LSM,KEYT target,skiplist *list){
	pthread_mutex_lock(&merge_lock);
	KEYT t=target--;
	while(1){
		if(t==0){
			if(LSM->buf.disk[0]==NULL){
				LSM->buf.disk[0]=(level*)malloc(sizeof(level));
				level_init(LSM->buf.disk[0],MUL);
				LSM->buf.disk[0]->number=1;
			}
			if(LSM->buf.disk[0]->size<LSM->buf.disk[0]->m_size){
				compaction(LSM,NULL,LSM->buf.disk[0],list);
			}
			else{
				t++; continue;
			}
			pthread_mutex_unlock(&merge_lock);
			return true;
		}
		else{
			if(LSM->buf.disk[t]==NULL){
				LSM->buf.disk[t]=(level*)malloc(sizeof(level));
				level_init(LSM->buf.disk[t],LSM->buf.disk[t-1]->size*MUL);
				LSM->buf.disk[t]->number=t+1;
			}
			if(LSM->buf.disk[t]->size<LSM->buf.disk[t]->m_size){
				compaction(LSM,LSM->buf.disk[t-1],LSM->buf.disk[t],list);
				t--;
			}
			else{
				t++;
			}
			if(target==t)
				break;
			continue;
		}
	}
	pthread_mutex_unlock(&merge_lock);
	return true;
}
