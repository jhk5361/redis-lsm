!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BOOL	lsmtree/utils.h	49;"	d
BOOL	utils.h	49;"	d
BUF_SIZE	server.h	4;"	d
BUSYPOINT	lsmtree/utils.h	17;"	d
BUSYPOINT	utils.h	17;"	d
CC	Makefile	/^CC = g++ -D_FILE_OFFSET_BITS=64$/;"	m
CXX	Makefile	/^CXX = g++ -D_FILE_OFFSET_BITS=64$/;"	m
Child	bptree.h	/^typedef union Child{$/;"	u
Child	bptree.h	/^}Child;$/;"	t	typeref:union:Child
Child	lsmtree/bptree.h	/^typedef union Child{$/;"	u
Child	lsmtree/bptree.h	/^}Child;$/;"	t	typeref:union:Child
DequeReq	request.c	/^req_t* DequeReq() {$/;"	f
ENDMERGE	lsmtree/utils.h	25;"	d
ENDMERGE	utils.h	25;"	d
EnqueReq	request.c	/^void EnqueReq(req_t *req, uint64_t seq) {$/;"	f
Entry	bptree.h	/^typedef struct Entry{$/;"	s
Entry	bptree.h	/^}Entry;$/;"	t	typeref:struct:Entry
Entry	lsmtree/bptree.h	/^typedef struct Entry{$/;"	s
Entry	lsmtree/bptree.h	/^}Entry;$/;"	t	typeref:struct:Entry
FILTERBIT	lsmtree/utils.h	10;"	d
FILTERBIT	utils.h	10;"	d
FILTERFUNC	lsmtree/utils.h	9;"	d
FILTERFUNC	utils.h	9;"	d
FILTERSIZE	lsmtree/utils.h	8;"	d
FILTERSIZE	utils.h	8;"	d
GETTEST	lsmtree/utils.h	30;"	d
GETTEST	utils.h	30;"	d
GetKey	command.c	/^int GetKey(char *str, int len, int cur, req_t *req ) {$/;"	f
GetLength	command.c	/^int GetLength(char *str, char cmp, int len, int cur, req_t *req, char which) {$/;"	f
GetRequest	command.c	/^int GetRequest(int fd, char *str, int len, req_t *req, unsigned int *start, unsigned int *end, heap_t *pq, pthread_mutex_t *mutx) {$/;"	f
GetType	command.c	/^int GetType(char *str, int len, int cur, req_t *req) {$/;"	f
GetValue	command.c	/^int GetValue(char* str, int len, int cur, req_t *req) {$/;"	f
INPUTSIZE	lsmtree/utils.h	16;"	d
INPUTSIZE	utils.h	16;"	d
KEYN	lsmtree/utils.h	12;"	d
KEYN	utils.h	12;"	d
KEYT	lsmtree/utils.h	7;"	d
KEYT	utils.h	7;"	d
Key_info	request.h	/^}Key_info;$/;"	t	typeref:struct:__anon3
Keyword_info	request.h	/^}Keyword_info;$/;"	t	typeref:struct:__anon1
LEVELN	lsmtree/utils.h	15;"	d
LEVELN	utils.h	15;"	d
LR_COMP_T	LR_inter.h	12;"	d
LR_COMP_T	lsmtree/LR_inter.h	11;"	d
LR_DDR_T	LR_inter.h	16;"	d
LR_DDR_T	lsmtree/LR_inter.h	15;"	d
LR_DDW_T	LR_inter.h	17;"	d
LR_DDW_T	lsmtree/LR_inter.h	16;"	d
LR_DR_T	LR_inter.h	15;"	d
LR_DR_T	lsmtree/LR_inter.h	14;"	d
LR_DW_T	LR_inter.h	14;"	d
LR_DW_T	lsmtree/LR_inter.h	13;"	d
LR_FLUSH_T	LR_inter.h	13;"	d
LR_FLUSH_T	lsmtree/LR_inter.h	12;"	d
LR_READ_T	LR_inter.h	10;"	d
LR_READ_T	lsmtree/LR_inter.h	9;"	d
LR_WRITE_T	LR_inter.h	11;"	d
LR_WRITE_T	lsmtree/LR_inter.h	10;"	d
LSM	LR_inter.c	/^lsmtree *LSM;$/;"	v
LSM	lsmtree/LR_inter.c	/^lsmtree *LSM;$/;"	v
MAXC	lsmtree/utils.h	26;"	d
MAXC	utils.h	26;"	d
MAXNODE	lsmtree/utils.h	27;"	d
MAXNODE	utils.h	27;"	d
MAX_CLNT	server.h	5;"	d
MAX_L	lsmtree/skiplist.h	3;"	d
MAX_L	skiplist.h	3;"	d
MC	lsmtree/utils.h	41;"	d
MC	lsmtree/utils.h	46;"	d
MC	utils.h	41;"	d
MC	utils.h	46;"	d
ME	lsmtree/utils.h	39;"	d
ME	lsmtree/utils.h	44;"	d
ME	utils.h	39;"	d
ME	utils.h	44;"	d
MP	lsmtree/utils.h	40;"	d
MP	lsmtree/utils.h	45;"	d
MP	utils.h	40;"	d
MP	utils.h	45;"	d
MS	lsmtree/utils.h	38;"	d
MS	lsmtree/utils.h	43;"	d
MS	utils.h	38;"	d
MS	utils.h	43;"	d
MUL	lsmtree/utils.h	14;"	d
MUL	utils.h	14;"	d
MeasureTime	lsmtree/measure.h	/^typedef struct MeasureTime{$/;"	s
MeasureTime	lsmtree/measure.h	/^}MeasureTime;$/;"	t	typeref:struct:MeasureTime
MeasureTime	measure.h	/^typedef struct MeasureTime{$/;"	s
MeasureTime	measure.h	/^}MeasureTime;$/;"	t	typeref:struct:MeasureTime
Node	bptree.h	/^typedef struct Node{$/;"	s
Node	bptree.h	/^}Node;$/;"	t	typeref:struct:Node
Node	lsmtree/bptree.h	/^typedef struct Node{$/;"	s
Node	lsmtree/bptree.h	/^}Node;$/;"	t	typeref:struct:Node
OBJECTS	Makefile	/^OBJECTS = server.o command.o queue.o request.o priority_queue.o lsmtree.o bptree.o utils.o measure.o skiplist.o threading.o LR_inter.o$/;"	m
PAGESIZE	lsmtree/utils.h	13;"	d
PAGESIZE	utils.h	13;"	d
PQ_front	priority_queue.c	/^node_t* PQ_front(heap_t *h) {$/;"	f
PQ_pop	priority_queue.c	/^void *PQ_pop (heap_t *h) {$/;"	f
PQ_push	priority_queue.c	/^void PQ_push (heap_t *h, unsigned int priority, void *data) {$/;"	f
QUEUE_H_	queue.h	9;"	d
READTEST	lsmtree/utils.h	29;"	d
READTEST	utils.h	29;"	d
SEQUENCE	lsmtree/utils.h	28;"	d
SEQUENCE	utils.h	28;"	d
SKIP_META	lsmtree/utils.h	34;"	d
SKIP_META	utils.h	34;"	d
SNODE_SIZE	lsmtree/utils.h	32;"	d
SNODE_SIZE	utils.h	32;"	d
STARTMERGE	lsmtree/utils.h	24;"	d
STARTMERGE	utils.h	24;"	d
SendBulkValue	command.c	/^int SendBulkValue(int fd, char* value, int len) {$/;"	f
SendDelCommand	command.c	/^int SendDelCommand(int fd) {$/;"	f
SendErrCommand	command.c	/^int SendErrCommand(int fd, char* ErrMsg) {$/;"	f
SendOkCommand	command.c	/^int SendOkCommand(int fd) {$/;"	f
THREAD	lsmtree/utils.h	20;"	d
THREAD	utils.h	20;"	d
THREADNUM	lsmtree/utils.h	19;"	d
THREADNUM	utils.h	19;"	d
THREADQN	lsmtree/utils.h	18;"	d
THREADQN	utils.h	18;"	d
Type_info	request.h	/^}Type_info;$/;"	t	typeref:struct:__anon2
Value_info	request.h	/^}Value_info;$/;"	t	typeref:struct:__anon4
__BP__HEADER__	bptree.h	2;"	d
__BP__HEADER__	lsmtree/bptree.h	2;"	d
__COMMAND_H_	command.h	2;"	d
__LR_INTER_H__	LR_inter.h	2;"	d
__LR_INTER_H__	lsmtree/LR_inter.h	2;"	d
__LSM_HEADER__	lsmtree.h	2;"	d
__LSM_HEADER__	lsmtree/lsmtree.h	2;"	d
__MEASURE_H__	lsmtree/measure.h	2;"	d
__MEASURE_H__	measure.h	2;"	d
__PRIORITY_QUEUE_H__	priority_queue.h	2;"	d
__REQUEST_H__	request.h	2;"	d
__SERVER_H__	server.h	2;"	d
__SKIPLIST_HEADER	lsmtree/skiplist.h	2;"	d
__SKIPLIST_HEADER	skiplist.h	2;"	d
__STDC_FORMAT_MACROS	lsmtree/threading.c	12;"	d	file:
__STDC_FORMAT_MACROS	threading.c	12;"	d	file:
__THREAD_H__	lsmtree/threading.h	2;"	d
__THREAD_H__	threading.h	2;"	d
__UTIL_H__	lsmtree/utils.h	2;"	d
__UTIL_H__	utils.h	2;"	d
_node	queue.h	/^typedef struct _node {$/;"	s
_queue	queue.h	/^typedef struct _queue{$/;"	s
activated_check	lsmtree/threading.h	/^	pthread_mutex_t activated_check;$/;"	m	struct:threading
activated_check	threading.h	/^	pthread_mutex_t activated_check;$/;"	m	struct:threading
activatednum	lsmtree/threading.h	/^	int activatednum;$/;"	m	struct:threadset
activatednum	threading.h	/^	int activatednum;$/;"	m	struct:threadset
add_rear	queue.c	/^void add_rear(queue *qptr, void *value){$/;"	f
alloc_dma	request.c	/^void alloc_dma(req_t *req) {$/;"	f
alloc_req	request.c	/^req_t* alloc_req(req_t *req) {$/;"	f
argv	lsmtree/lsmtree_org.c	/^KEYT argv[3];$/;"	v
argv	lsmtree_org.c	/^KEYT argv[3];$/;"	v
binary_search_node	bptree.c	/^Node* binary_search_node(Node *node, KEYT key){$/;"	f
binary_search_node	lsmtree/bptree.c	/^Node* binary_search_node(Node *node, KEYT key){$/;"	f
bool	lsmtree/utils.h	/^typedef enum{false,true} bool;$/;"	t	typeref:enum:__anon5
bool	utils.h	/^typedef enum{false,true} bool;$/;"	t	typeref:enum:__anon8
buf	lsmtree.h	/^	buffer buf;$/;"	m	struct:lsmtree
buf	lsmtree/lsmtree.h	/^	buffer buf;$/;"	m	struct:lsmtree
buf_data	lsmtree/threading.h	/^	sktable *buf_data;$/;"	m	struct:threading
buf_data	threading.h	/^	sktable *buf_data;$/;"	m	struct:threading
buffer	lsmtree.h	/^typedef struct buffer{$/;"	s
buffer	lsmtree.h	/^}buffer;$/;"	t	typeref:struct:buffer
buffer	lsmtree/lsmtree.h	/^typedef struct buffer{$/;"	s
buffer	lsmtree/lsmtree.h	/^}buffer;$/;"	t	typeref:struct:buffer
buffer_free	lsmtree.c	/^void buffer_free(buffer *buf){$/;"	f
buffer_free	lsmtree/lsmtree.c	/^void buffer_free(buffer *buf){$/;"	f
buffer_free	lsmtree/lsmtree_org.c	/^void buffer_free(buffer *buf){$/;"	f
buffer_free	lsmtree_org.c	/^void buffer_free(buffer *buf){$/;"	f
children	bptree.h	/^	Child children[MAXC+1];$/;"	m	struct:Node
children	lsmtree/bptree.h	/^	Child children[MAXC+1];$/;"	m	struct:Node
clnt_cnt	server.c	/^int clnt_cnt = 0;$/;"	v
clnt_mutx	server.c	/^pthread_mutex_t clnt_mutx = PTHREAD_MUTEX_INITIALIZER;$/;"	v
clnt_socks	server.c	/^int clnt_socks[MAX_CLNT];$/;"	v
cmp	lsmtree/rand.c	/^int cmp(const void *a, const void *b){$/;"	f
cmp	rand.c	/^int cmp(const void *a, const void *b){$/;"	f
cnt	lsmtree/measure.h	/^	int cnt;$/;"	m	struct:MeasureTime
cnt	measure.h	/^	int cnt;$/;"	m	struct:MeasureTime
compaction	lsmtree.c	/^bool compaction(lsmtree *LSM,level *src, level *des,Entry *ent,lsmtree_gc_req_t * req){$/;"	f
compaction	lsmtree/lsmtree.c	/^bool compaction(lsmtree *LSM,level *src, level *des,Entry *ent,lsmtree_gc_req_t * req){$/;"	f
compaction	lsmtree/lsmtree_org.c	/^bool compaction(lsmtree *LSM,level *src, level *des,int n){$/;"	f
compaction	lsmtree_org.c	/^bool compaction(lsmtree *LSM,level *src, level *des,int n){$/;"	f
compt_headers	LR_inter.h	/^	sktable *compt_headers;$/;"	m	struct:lsmtree_gc_req_t
compt_headers	lsmtree/LR_inter.h	/^	asktable *compt_headers;$/;"	m	struct:lsmtree_gc_req_t
consum	lsmtree/lsmtree_org.c	/^sem_t consum;$/;"	v
consum	lsmtree_org.c	/^sem_t consum;$/;"	v
count	bptree.h	/^	short count;$/;"	m	struct:Node
count	lsmtree/bptree.h	/^	short count;$/;"	m	struct:Node
count	queue.h	/^	int count;$/;"	m	struct:_queue
counter	lsmtree/threading.h	/^	int counter;$/;"	m	struct:threadset
counter	threading.h	/^	int counter;$/;"	m	struct:threadset
create_PQ	priority_queue.c	/^heap_t* create_PQ() {$/;"	f
create_queue	queue.c	/^queue* create_queue(){$/;"	f
cur	request.h	/^	unsigned int *cur;$/;"	m	struct:req_t
data	lsmtree.h	/^	sktable *data;$/;"	m	struct:buffer
data	lsmtree/lsmtree.h	/^	sktable *data;$/;"	m	struct:buffer
data	priority_queue.h	/^	void *data;$/;"	m	struct:__anon6
debug_m	lsmtree/threading.h	/^	pthread_mutex_t debug_m;$/;"	m	struct:threadset
debug_m	threading.h	/^	pthread_mutex_t debug_m;$/;"	m	struct:threadset
debugkey	lsmtree/lsmtree_org.c	/^int debugkey=0;$/;"	v
debugkey	lsmtree_org.c	/^int debugkey=0;$/;"	v
depth	bptree.h	/^	int depth;$/;"	m	struct:level
depth	lsmtree/bptree.h	/^	int depth;$/;"	m	struct:level
destroy_PQ	priority_queue.c	/^void destroy_PQ(heap_t* h) {$/;"	f
destroy_queue	queue.c	/^void destroy_queue(queue *qptr){$/;"	f
dfd	lsmtree.h	/^	int dfd;$/;"	m	struct:lsmtree
dfd	lsmtree/lsmtree.h	/^	int dfd;$/;"	m	struct:lsmtree
dfd_lock	lsmtree/skiplist.c	/^pthread_mutex_t dfd_lock;$/;"	v
dfd_lock	skiplist.c	/^pthread_mutex_t dfd_lock;$/;"	v
disk	lsmtree.h	/^	level *disk[LEVELN];$/;"	m	struct:buffer
disk	lsmtree/lsmtree.h	/^	level *disk[LEVELN];$/;"	m	struct:buffer
dmaTag	request.h	/^	int dmaTag;$/;"	m	struct:req_t
dmatag	LR_inter.h	/^	int dmatag;$/;"	m	struct:lsmtree_gc_req_t
dmatag	LR_inter.h	/^	int dmatag;$/;"	m	struct:lsmtree_req_t
dmatag	lsmtree/LR_inter.h	/^	int dmatag;$/;"	m	struct:lsmtree_gc_req_t
dmatag	lsmtree/LR_inter.h	/^	int dmatag;$/;"	m	struct:lsmtree_req_t
donothing	lsmtree/measure.c	/^void donothing(MeasureTime *t){$/;"	f
donothing	measure.c	/^void donothing(MeasureTime *t){$/;"	f
donothing2	lsmtree/measure.c	/^void donothing2(MeasureTime *t,char *a){$/;"	f
donothing2	measure.c	/^void donothing2(MeasureTime *t,char *a){$/;"	f
end	bptree.h	/^	KEYT end;$/;"	m	struct:Entry
end	lsmtree/bptree.h	/^	KEYT end;$/;"	m	struct:Entry
end	lsmtree/measure.h	/^	struct timeval start,end;$/;"	m	struct:linktime	typeref:struct:linktime::
end	lsmtree/skiplist.h	/^	KEYT start,end;$/;"	m	struct:skiplist
end	measure.h	/^	struct timeval start,end;$/;"	m	struct:linktime	typeref:struct:linktime::
end	request.c	/^int start = 0, end = 0;$/;"	v
end	skiplist.h	/^	KEYT start,end;$/;"	m	struct:skiplist
end_req	LR_inter.h	/^	int8_t (*end_req)(void *);	$/;"	m	struct:lsmtree_req_t
end_req	LR_inter.h	/^	int8_t (*end_req)(void *);$/;"	m	struct:lsmtree_gc_req_t
end_req	lsmtree/LR_inter.h	/^	int8_t (*end_req)(void *);	$/;"	m	struct:lsmtree_req_t
end_req	lsmtree/LR_inter.h	/^	int8_t (*end_req)(void *);$/;"	m	struct:lsmtree_gc_req_t
end_req	request.c	/^int end_req(req_t *req) {$/;"	f
end_req	request.h	/^	int (*end_req)(struct req_t*);$/;"	m	struct:req_t
entry	bptree.h	/^	struct Entry *entry;$/;"	m	union:Child	typeref:struct:Child::Entry
entry	lsmtree/bptree.h	/^	struct Entry *entry;$/;"	m	union:Child	typeref:struct:Child::Entry
errcnt	lsmtree/threading.h	/^	int errcnt;$/;"	m	struct:threadset
errcnt	threading.h	/^	int errcnt;$/;"	m	struct:threadset
execute_server	server.c	/^int execute_server(int serv_sock) {$/;"	f
false	lsmtree/utils.h	/^typedef enum{false,true} bool;$/;"	e	enum:__anon5
false	utils.h	/^typedef enum{false,true} bool;$/;"	e	enum:__anon8
fd	request.h	/^	int fd;$/;"	m	struct:req_t
filenumber	lsmtree/lsmtree_org.c	/^static int filenumber=0;$/;"	v	file:
filenumber	lsmtree_org.c	/^static int filenumber=0;$/;"	v	file:
free_dma	request.c	/^void free_dma(req_t *req) {$/;"	f
free_entry	bptree.c	/^void free_entry(Entry *entry){$/;"	f
free_entry	lsmtree/bptree.c	/^void free_entry(Entry *entry){$/;"	f
free_req	request.c	/^void free_req(req_t *req) {$/;"	f
front	queue.h	/^	nptr front;$/;"	m	struct:_queue
gc_lock	lsmtree/threading.h	/^	pthread_mutex_t gc_lock;$/;"	m	struct:threadset
gc_lock	threading.h	/^	pthread_mutex_t gc_lock;$/;"	m	struct:threadset
gc_q	lsmtree/threading.h	/^	queue *gc_q;$/;"	m	struct:threadset
gc_q	threading.h	/^	queue *gc_q;$/;"	m	struct:threadset
gc_thread	lsmtree/threading.h	/^	threading gc_thread;$/;"	m	struct:threadset
gc_thread	threading.h	/^	threading gc_thread;$/;"	m	struct:threadset
get	lsmtree.c	/^int get(lsmtree *LSM,KEYT key,char *ret){\/*$/;"	f
get	lsmtree/lsmtree.c	/^int get(lsmtree *LSM,KEYT key,char *ret){\/*$/;"	f
get	lsmtree/lsmtree_org.c	/^int get(lsmtree *LSM,KEYT key,char *ret){$/;"	f
get	lsmtree_org.c	/^int get(lsmtree *LSM,KEYT key,char *ret){$/;"	f
getLevel	lsmtree/skiplist.c	/^static int getLevel(){$/;"	f	file:
getLevel	skiplist.c	/^static int getLevel(){$/;"	f	file:
header	lsmtree/measure.h	/^	linktime *header;$/;"	m	struct:MeasureTime
header	lsmtree/skiplist.h	/^	snode *header;$/;"	m	struct:skiplist
header	measure.h	/^	linktime *header;$/;"	m	struct:MeasureTime
header	skiplist.h	/^	snode *header;$/;"	m	struct:skiplist
header_read_argv_check	lsmtree/lsmtree_org.c	/^pthread_mutex_t header_read_argv_check;$/;"	v
header_read_argv_check	lsmtree_org.c	/^pthread_mutex_t header_read_argv_check;$/;"	v
heap_t	priority_queue.h	/^} heap_t;$/;"	t	typeref:struct:__anon7
hppa	lsmtree/skiplist.h	/^	KEYT hppa;$/;"	m	struct:skiplist
hppa	skiplist.h	/^	KEYT hppa;$/;"	m	struct:skiplist
id	lsmtree/threading.h	/^	pthread_t id;$/;"	m	struct:threading
id	threading.h	/^	pthread_t id;$/;"	m	struct:threading
init_lsm	lsmtree.c	/^lsmtree* init_lsm(lsmtree *res){$/;"	f
init_lsm	lsmtree/lsmtree.c	/^lsmtree* init_lsm(lsmtree *res){$/;"	f
init_lsm	lsmtree/lsmtree_org.c	/^lsmtree* init_lsm(lsmtree *res){$/;"	f
init_lsm	lsmtree_org.c	/^lsmtree* init_lsm(lsmtree *res){$/;"	f
init_server	server.c	/^int init_server(int port) {	\/\/ socket, bind, listen$/;"	f
is_compt_needed	lsmtree.c	/^bool is_compt_needed(lsmtree *input, KEYT level){$/;"	f
is_compt_needed	lsmtree/lsmtree.c	/^bool is_compt_needed(lsmtree *input, KEYT level){$/;"	f
is_flush_needed	lsmtree.c	/^bool is_flush_needed(lsmtree *input){$/;"	f
is_flush_needed	lsmtree/lsmtree.c	/^bool is_flush_needed(lsmtree *input){$/;"	f
isactivated	lsmtree/threading.h	/^	bool isactivated;$/;"	m	struct:threading
isactivated	threading.h	/^	bool isactivated;$/;"	m	struct:threading
key	bptree.h	/^	KEYT key;$/;"	m	struct:Entry
key	lsmtree/bptree.h	/^	KEYT key;$/;"	m	struct:Entry
key	lsmtree/skiplist.h	/^	KEYT key;$/;"	m	struct:keyset
key	lsmtree/skiplist.h	/^	KEYT key;$/;"	m	struct:snode
key	request.h	/^	uint64_t key;$/;"	m	struct:__anon3
key	skiplist.h	/^	KEYT key;$/;"	m	struct:keyset
key	skiplist.h	/^	KEYT key;$/;"	m	struct:snode
keySet	lsmtree/rand.c	/^KEYT keySet[INPUTSIZE];$/;"	v
keySet	rand.c	/^KEYT keySet[INPUTSIZE];$/;"	v
key_info	request.h	/^	Key_info *key_info;$/;"	m	struct:req_t
keys	LR_inter.h	/^ 	keyset *keys;$/;"	m	struct:lsmtree_req_t
keys	LR_inter.h	/^    	keyset *keys;$/;"	m	struct:lsmtree_gc_req_t
keys	lsmtree/LR_inter.h	/^ 	keyset *keys;$/;"	m	struct:lsmtree_req_t
keys	lsmtree/LR_inter.h	/^    	keyset *keys;$/;"	m	struct:lsmtree_gc_req_t
keyset	LR_inter.h	/^typedef struct keyset keyset;$/;"	t	typeref:struct:keyset
keyset	lsmtree/LR_inter.h	/^typedef struct keyset keyset;$/;"	t	typeref:struct:keyset
keyset	lsmtree/skiplist.h	/^typedef struct keyset{$/;"	s
keyset	lsmtree/skiplist.h	/^}keyset;$/;"	t	typeref:struct:keyset
keyset	skiplist.h	/^typedef struct keyset{$/;"	s
keyset	skiplist.h	/^}keyset;$/;"	t	typeref:struct:keyset
keywordNum	request.h	/^	int keywordNum;$/;"	m	struct:__anon1
keyword_info	request.h	/^	Keyword_info *keyword_info;$/;"	m	struct:req_t
lastB	lsmtree.h	/^	skiplist *lastB;$/;"	m	struct:buffer
lastB	lsmtree/lsmtree.h	/^	skiplist *lastB;$/;"	m	struct:buffer
leaf	bptree.h	/^	bool leaf;$/;"	m	struct:Node
leaf	lsmtree/bptree.h	/^	bool leaf;$/;"	m	struct:Node
len	priority_queue.h	/^	int len;$/;"	m	struct:__anon7
len	request.h	/^	int len;$/;"	m	struct:__anon2
len	request.h	/^	int len;$/;"	m	struct:__anon3
len	request.h	/^	int len;$/;"	m	struct:__anon4
lev_addr	lsmtree.h	/^	int lev_addr[LEVELN];$/;"	m	struct:table
lev_addr	lsmtree/lsmtree.h	/^	int lev_addr[LEVELN];$/;"	m	struct:table
level	bptree.h	/^typedef struct level{$/;"	s
level	bptree.h	/^}level;$/;"	t	typeref:struct:level
level	lsmtree/bptree.h	/^typedef struct level{$/;"	s
level	lsmtree/bptree.h	/^}level;$/;"	t	typeref:struct:level
level	lsmtree/skiplist.h	/^	int level;$/;"	m	struct:snode
level	lsmtree/skiplist.h	/^	uint8_t level;$/;"	m	struct:skiplist
level	lsmtree/threading.h	/^	int level;$/;"	m	struct:threading
level	skiplist.h	/^	int level;$/;"	m	struct:snode
level	skiplist.h	/^	uint8_t level;$/;"	m	struct:skiplist
level	threading.h	/^	int level;$/;"	m	struct:threading
level_delete	bptree.c	/^Node * level_delete(level *lev, KEYT key){$/;"	f
level_delete	lsmtree/bptree.c	/^Node * level_delete(level *lev, KEYT key){$/;"	f
level_delete_restructuring	bptree.c	/^Node *level_delete_restructuring(level *lev, Node *target){$/;"	f
level_delete_restructuring	lsmtree/bptree.c	/^Node *level_delete_restructuring(level *lev, Node *target){$/;"	f
level_directory_insert	bptree.c	/^Node *level_directory_insert(level *lev,Node *target, KEYT sep, Node *prev, Node *next){$/;"	f
level_directory_insert	lsmtree/bptree.c	/^Node *level_directory_insert(level *lev,Node *target, KEYT sep, Node *prev, Node *next){$/;"	f
level_entry_copy	bptree.c	/^Entry *level_entry_copy(Entry *input){$/;"	f
level_entry_copy	lsmtree/bptree.c	/^Entry *level_entry_copy(Entry *input){$/;"	f
level_find	bptree.c	/^Entry *level_find(level *lev, KEYT key){$/;"	f
level_find	lsmtree/bptree.c	/^Entry *level_find(level *lev, KEYT key){$/;"	f
level_find_leafnode	bptree.c	/^Node *level_find_leafnode(level *lev, KEYT key){$/;"	f
level_find_leafnode	lsmtree/bptree.c	/^Node *level_find_leafnode(level *lev, KEYT key){$/;"	f
level_free	bptree.c	/^void level_free(level *lev){$/;"	f
level_free	lsmtree/bptree.c	/^void level_free(level *lev){$/;"	f
level_getFirst	bptree.c	/^Entry *level_getFirst(level *lev){$/;"	f
level_getFirst	lsmtree/bptree.c	/^Entry *level_getFirst(level *lev){$/;"	f
level_get_victim	bptree.c	/^Entry *level_get_victim(level *lev){$/;"	f
level_get_victim	lsmtree/bptree.c	/^Entry *level_get_victim(level *lev){$/;"	f
level_init	bptree.c	/^level *level_init(level* input, int size){$/;"	f
level_init	lsmtree/bptree.c	/^level *level_init(level* input, int size){$/;"	f
level_insert	bptree.c	/^Node *level_insert(level* lev, Entry *entry){$/;"	f
level_insert	lsmtree/bptree.c	/^Node *level_insert(level* lev, Entry *entry){$/;"	f
level_range_find	bptree.c	/^Entry **level_range_find(level *lev, KEYT start, KEYT end){$/;"	f
level_range_find	lsmtree/bptree.c	/^Entry **level_range_find(level *lev, KEYT start, KEYT end){$/;"	f
level_read_lock	lsmtree.c	/^pthread_mutex_t level_read_lock[LEVELN+2];$/;"	v
level_read_lock	lsmtree/lsmtree.c	/^pthread_mutex_t level_read_lock[LEVELN+2];$/;"	v
level_read_locking	lsmtree.c	/^void level_read_locking(int level){$/;"	f
level_read_locking	lsmtree/lsmtree.c	/^void level_read_locking(int level){$/;"	f
level_read_unlocking	lsmtree.c	/^void level_read_unlocking(int level){$/;"	f
level_read_unlocking	lsmtree/lsmtree.c	/^void level_read_unlocking(int level){$/;"	f
level_traversal	lsmtree/lsmtree_org.c	/^void level_traversal(level* t){$/;"	f
level_traversal	lsmtree_org.c	/^void level_traversal(level* t){$/;"	f
level_write_lock	lsmtree.c	/^pthread_mutex_t level_write_lock[LEVELN+2];$/;"	v
level_write_lock	lsmtree/lsmtree.c	/^pthread_mutex_t level_write_lock[LEVELN+2];$/;"	v
level_write_locking	lsmtree.c	/^void level_write_locking(int level){$/;"	f
level_write_locking	lsmtree/lsmtree.c	/^void level_write_locking(int level){$/;"	f
level_write_unlocking	lsmtree.c	/^void level_write_unlocking(int level){$/;"	f
level_write_unlocking	lsmtree/lsmtree.c	/^void level_write_unlocking(int level){$/;"	f
linktime	lsmtree/measure.h	/^typedef struct linktime{$/;"	s
linktime	lsmtree/measure.h	/^}linktime;$/;"	t	typeref:struct:linktime
linktime	measure.h	/^typedef struct linktime{$/;"	s
linktime	measure.h	/^}linktime;$/;"	t	typeref:struct:linktime
list	lsmtree/skiplist.h	/^	struct snode **list;$/;"	m	struct:snode	typeref:struct:snode::snode
list	skiplist.h	/^	struct snode **list;$/;"	m	struct:snode	typeref:struct:snode::snode
lr_end_req	LR_inter.c	/^int8_t lr_end_req(void *ra){$/;"	f
lr_end_req	lsmtree/LR_inter.c	/^int8_t lr_end_req(void *ra){$/;"	f
lr_gc_end_req	LR_inter.c	/^int8_t lr_gc_end_req(void *ra){$/;"	f
lr_gc_end_req	lsmtree/LR_inter.c	/^int8_t lr_gc_end_req(void *ra){$/;"	f
lr_gc_make_req	LR_inter.c	/^int8_t lr_gc_make_req(int8_t t_num){$/;"	f
lr_gc_make_req	lsmtree/LR_inter.c	/^int8_t lr_gc_make_req(int8_t t_num){$/;"	f
lr_inter_free	LR_inter.c	/^int8_t lr_inter_free(){$/;"	f
lr_inter_free	lsmtree/LR_inter.c	/^int8_t lr_inter_free(){$/;"	f
lr_inter_init	LR_inter.c	/^int8_t lr_inter_init(){$/;"	f
lr_inter_init	lsmtree/LR_inter.c	/^int8_t lr_inter_init(){$/;"	f
lr_is_gc_needed	LR_inter.c	/^int8_t lr_is_gc_needed(){$/;"	f
lr_is_supbusy	LR_inter.c	/^int8_t lr_is_supbusy(){$/;"	f
lr_make_req	LR_inter.c	/^int8_t lr_make_req(req_t *r){$/;"	f
lr_make_req	lsmtree/LR_inter.c	/^int8_t lr_make_req(req_t *r){$/;"	f
lr_req_wait	LR_inter.c	/^int8_t lr_req_wait(lsmtree_req_t *input){$/;"	f
lsm_clear	lsmtree.c	/^void lsm_clear(lsmtree *input){$/;"	f
lsm_clear	lsmtree/lsmtree.c	/^void lsm_clear(lsmtree *input){$/;"	f
lsm_clear	lsmtree/lsmtree_org.c	/^void *lsm_clear(lsmtree *input){$/;"	f
lsm_clear	lsmtree_org.c	/^void *lsm_clear(lsmtree *input){$/;"	f
lsm_free	lsmtree.c	/^void lsm_free(lsmtree *input){$/;"	f
lsm_free	lsmtree/lsmtree.c	/^void lsm_free(lsmtree *input){$/;"	f
lsm_free	lsmtree/lsmtree_org.c	/^void lsm_free(lsmtree *input){$/;"	f
lsm_free	lsmtree_org.c	/^void lsm_free(lsmtree *input){$/;"	f
lsm_reset	lsmtree.c	/^lsmtree* lsm_reset(lsmtree* input){$/;"	f
lsm_reset	lsmtree/lsmtree.c	/^lsmtree* lsm_reset(lsmtree* input){$/;"	f
lsm_reset	lsmtree/lsmtree_org.c	/^lsmtree* lsm_reset(lsmtree* input){$/;"	f
lsm_reset	lsmtree_org.c	/^lsmtree* lsm_reset(lsmtree* input){$/;"	f
lsmtree	lsmtree.h	/^typedef struct lsmtree{$/;"	s
lsmtree	lsmtree.h	/^}lsmtree;$/;"	t	typeref:struct:lsmtree
lsmtree	lsmtree/lsmtree.h	/^typedef struct lsmtree{$/;"	s
lsmtree	lsmtree/lsmtree.h	/^}lsmtree;$/;"	t	typeref:struct:lsmtree
lsmtree_gc_req_t	LR_inter.h	/^typedef struct lsmtree_gc_req_t{$/;"	s
lsmtree_gc_req_t	LR_inter.h	/^}lsmtree_gc_req_t;$/;"	t	typeref:struct:lsmtree_gc_req_t
lsmtree_gc_req_t	lsmtree/LR_inter.h	/^typedef struct lsmtree_gc_req_t{$/;"	s
lsmtree_gc_req_t	lsmtree/LR_inter.h	/^}lsmtree_gc_req_t;$/;"	t	typeref:struct:lsmtree_gc_req_t
lsmtree_gc_req_t	lsmtree/skiplist.h	/^typedef struct lsmtree_gc_req_t lsmtree_gc_req_t;$/;"	t	typeref:struct:lsmtree_gc_req_t
lsmtree_gc_req_t	skiplist.h	/^typedef struct lsmtree_gc_req_t lsmtree_gc_req_t;$/;"	t	typeref:struct:lsmtree_gc_req_t
lsmtree_req_t	LR_inter.h	/^typedef struct lsmtree_req_t{$/;"	s
lsmtree_req_t	LR_inter.h	/^}lsmtree_req_t;$/;"	t	typeref:struct:lsmtree_req_t
lsmtree_req_t	lsmtree/LR_inter.h	/^typedef struct lsmtree_req_t{$/;"	s
lsmtree_req_t	lsmtree/LR_inter.h	/^}lsmtree_req_t;$/;"	t	typeref:struct:lsmtree_req_t
lsmtree_req_t	lsmtree/skiplist.h	/^typedef struct lsmtree_req_t lsmtree_req_t;$/;"	t	typeref:struct:lsmtree_req_t
lsmtree_req_t	skiplist.h	/^typedef struct lsmtree_req_t lsmtree_req_t;$/;"	t	typeref:struct:lsmtree_req_t
m_size	bptree.h	/^	int m_size;$/;"	m	struct:level
m_size	lsmtree/bptree.h	/^	int m_size;$/;"	m	struct:level
main	bptree.c	/^int main(){$/;"	f
main	lsm_main.c	/^int main(){$/;"	f
main	lsmtree/bptree.c	/^int main(){$/;"	f
main	lsmtree/lsm_main.c	/^int main(){$/;"	f
main	lsmtree/measure.c	/^int main(){$/;"	f
main	lsmtree/rand.c	/^int main(){$/;"	f
main	lsmtree/skiplist.c	/^int main(){$/;"	f
main	lsmtree/utils.c	/^int main(){$/;"	f
main	measure.c	/^int main(){$/;"	f
main	rand.c	/^int main(){$/;"	f
main	server.c	/^int main(int argc, char* argv[]) {$/;"	f
main	skiplist.c	/^int main(){$/;"	f
main	utils.c	/^int main(){$/;"	f
make_entry	bptree.c	/^Entry *make_entry(KEYT key,KEYT end,KEYT pbn1){$/;"	f
make_entry	lsmtree/bptree.c	/^Entry *make_entry(KEYT key,KEYT end,KEYT pbn1){$/;"	f
make_req	request.c	/^int make_req(req_t *req) {$/;"	f
max_act	lsmtree/threading.h	/^	int max_act;$/;"	m	struct:threadset
max_act	threading.h	/^	int max_act;$/;"	m	struct:threadset
measure_end	lsmtree/measure.c	/^void measure_end(MeasureTime *m,char *format){$/;"	f
measure_end	lsmtree/measure.c	/^void measure_end(MeasureTime *m,std::string input ){$/;"	f
measure_end	measure.c	/^void measure_end(MeasureTime *m,char *format){$/;"	f
measure_end	measure.c	/^void measure_end(MeasureTime *m,std::string input ){$/;"	f
measure_init	lsmtree/measure.c	/^void measure_init(MeasureTime *m){$/;"	f
measure_init	measure.c	/^void measure_init(MeasureTime *m){$/;"	f
measure_pop	lsmtree/measure.c	/^void measure_pop(MeasureTime *m){$/;"	f
measure_pop	measure.c	/^void measure_pop(MeasureTime *m){$/;"	f
measure_start	lsmtree/measure.c	/^void measure_start(MeasureTime *m){$/;"	f
measure_start	measure.c	/^void measure_start(MeasureTime *m){$/;"	f
mem_lock	lsmtree.c	/^pthread_mutex_t mem_lock;$/;"	v
mem_lock	lsmtree/lsmtree.c	/^pthread_mutex_t mem_lock;$/;"	v
memtree	lsmtree.h	/^	skiplist *memtree;$/;"	m	struct:lsmtree
memtree	lsmtree/lsmtree.h	/^	skiplist *memtree;$/;"	m	struct:lsmtree
merge	lsmtree.c	/^bool merge(lsmtree *LSM,KEYT target,skiplist *list){\/*$/;"	f
merge	lsmtree/lsmtree.c	/^bool merge(lsmtree *LSM,KEYT target,skiplist *list){\/*$/;"	f
merge	lsmtree/lsmtree_org.c	/^bool merge(lsmtree *LSM,int t){$/;"	f
merge	lsmtree_org.c	/^bool merge(lsmtree *LSM,int t){$/;"	f
merge_lock	lsmtree.c	/^pthread_mutex_t merge_lock;$/;"	v
merge_lock	lsmtree/lsmtree.c	/^pthread_mutex_t merge_lock;$/;"	v
meta	lsmtree/skiplist.h	/^	keyset meta[2][KEYN\/2];$/;"	m	struct:sktable
meta	skiplist.h	/^	keyset meta[2][KEYN\/2];$/;"	m	struct:sktable
meta_lock	LR_inter.h	/^	pthread_mutex_t meta_lock;$/;"	m	struct:lsmtree_gc_req_t
meta_lock	LR_inter.h	/^	pthread_mutex_t meta_lock;$/;"	m	struct:lsmtree_req_t
meta_lock	lsmtree/LR_inter.h	/^	pthread_mutex_t meta_lock;$/;"	m	struct:lsmtree_gc_req_t
meta_lock	lsmtree/LR_inter.h	/^	pthread_mutex_t meta_lock;$/;"	m	struct:lsmtree_req_t
mio	lsmtree.c	/^memio_t* mio;$/;"	v
mio	lsmtree/lsmtree.c	/^memio_t* mio;$/;"	v
mio	lsmtree/lsmtree_org.c	/^memio_t* mio;$/;"	v
mio	lsmtree_org.c	/^memio_t* mio;$/;"	v
mt	lsm_main.c	/^MeasureTime mt;$/;"	v
mt	lsmtree/lsm_main.c	/^MeasureTime mt;$/;"	v
mutx	request.h	/^	pthread_mutex_t *mutx;$/;"	m	struct:req_t
mylist	lsmtree/skiplist.h	/^	skiplist *mylist;$/;"	m	struct:skIterator
mylist	skiplist.h	/^	skiplist *mylist;$/;"	m	struct:skIterator
next	lsmtree/measure.h	/^	struct linktime * next;$/;"	m	struct:linktime	typeref:struct:linktime::linktime
next	measure.h	/^	struct linktime * next;$/;"	m	struct:linktime	typeref:struct:linktime::linktime
next	queue.h	/^	struct _node* next;$/;"	m	struct:_node	typeref:struct:_node::_node
node	bptree.h	/^	struct Node *node;$/;"	m	union:Child	typeref:struct:Child::Node
node	lsmtree/bptree.h	/^	struct Node *node;$/;"	m	union:Child	typeref:struct:Child::Node
node	queue.h	/^}node;$/;"	t	typeref:struct:_node
node_init	bptree.c	/^Node *node_init(Node *node){$/;"	f
node_init	lsmtree/bptree.c	/^Node *node_init(Node *node){$/;"	f
node_t	priority_queue.h	/^} node_t;$/;"	t	typeref:struct:__anon6
nodes	priority_queue.h	/^	node_t *nodes;$/;"	m	struct:__anon7
now	lsmtree/skiplist.h	/^	snode *now;$/;"	m	struct:skIterator
now	skiplist.h	/^	snode *now;$/;"	m	struct:skIterator
now_number	LR_inter.h	/^	uint64_t now_number;$/;"	m	struct:lsmtree_gc_req_t
now_number	LR_inter.h	/^	uint64_t now_number;$/;"	m	struct:lsmtree_req_t
now_number	lsmtree/LR_inter.h	/^	uint64_t now_number;$/;"	m	struct:lsmtree_gc_req_t
now_number	lsmtree/LR_inter.h	/^	uint64_t now_number;$/;"	m	struct:lsmtree_req_t
nptr	queue.h	/^typedef node* nptr;$/;"	t
number	bptree.h	/^	int number;$/;"	m	struct:level
number	lsmtree/bptree.h	/^	int number;$/;"	m	struct:level
number	lsmtree/threading.h	/^	int number;$/;"	m	struct:threading
number	threading.h	/^	int number;$/;"	m	struct:threading
offset	request.h	/^	int offset;$/;"	m	struct:__anon2
offset	request.h	/^	int offset;$/;"	m	struct:__anon3
offset	request.h	/^	int offset;$/;"	m	struct:__anon4
padding	LR_inter.h	/^	char *padding[2];$/;"	m	struct:lsmtree_req_t
padding	lsmtree/LR_inter.h	/^	char *padding[2];$/;"	m	struct:lsmtree_req_t
params	LR_inter.h	/^	void *params[4];$/;"	m	struct:lsmtree_gc_req_t
params	LR_inter.h	/^	void *params[4];$/;"	m	struct:lsmtree_req_t
params	lsmtree/LR_inter.h	/^	void *params[4];$/;"	m	struct:lsmtree_gc_req_t
params	lsmtree/LR_inter.h	/^	void *params[4];$/;"	m	struct:lsmtree_req_t
parent	LR_inter.h	/^	struct lsmtree_gc_req_t *parent;$/;"	m	struct:lsmtree_gc_req_t	typeref:struct:lsmtree_gc_req_t::lsmtree_gc_req_t
parent	LR_inter.h	/^	struct lsmtree_req_t *parent;$/;"	m	struct:lsmtree_req_t	typeref:struct:lsmtree_req_t::lsmtree_req_t
parent	bptree.h	/^	struct Node *parent;$/;"	m	struct:Entry	typeref:struct:Entry::Node
parent	bptree.h	/^	struct Node *parent;$/;"	m	struct:Node	typeref:struct:Node::Node
parent	lsmtree/LR_inter.h	/^	struct lsmtree_gc_req_t *parent;$/;"	m	struct:lsmtree_gc_req_t	typeref:struct:lsmtree_gc_req_t::lsmtree_gc_req_t
parent	lsmtree/LR_inter.h	/^	struct lsmtree_req_t *parent;$/;"	m	struct:lsmtree_req_t	typeref:struct:lsmtree_req_t::lsmtree_req_t
parent	lsmtree/bptree.h	/^	struct Node *parent;$/;"	m	struct:Entry	typeref:struct:Entry::Node
parent	lsmtree/bptree.h	/^	struct Node *parent;$/;"	m	struct:Node	typeref:struct:Node::Node
pbn	bptree.h	/^	KEYT pbn;$/;"	m	struct:Entry
pbn	lsmtree/bptree.h	/^	KEYT pbn;$/;"	m	struct:Entry
ppa	lsmtree/skiplist.c	/^KEYT ppa=0;$/;"	v
ppa	lsmtree/skiplist.h	/^	KEYT ppa;$/;"	m	struct:keyset
ppa	lsmtree/skiplist.h	/^	KEYT ppa;$/;"	m	struct:snode
ppa	skiplist.c	/^KEYT ppa=0;$/;"	v
ppa	skiplist.h	/^	KEYT ppa;$/;"	m	struct:keyset
ppa	skiplist.h	/^	KEYT ppa;$/;"	m	struct:snode
pq	request.h	/^	heap_t *pq;$/;"	m	struct:req_t
priority	priority_queue.h	/^	int priority;$/;"	m	struct:__anon6
proc_req	request.c	/^void* proc_req(void *arg) {$/;"	f
processor	LR_inter.c	/^threadset processor;$/;"	v
processor	lsmtree/LR_inter.c	/^threadset processor;$/;"	v
put	lsmtree.c	/^bool put(lsmtree *LSM,KEYT key, char *value,lsmtree_req_t *req){$/;"	f
put	lsmtree/lsmtree.c	/^bool put(lsmtree *LSM,KEYT key, char *value,lsmtree_req_t *req){$/;"	f
put	lsmtree/lsmtree_org.c	/^bool put(lsmtree *LSM,KEYT key, char *value){$/;"	f
put	lsmtree_org.c	/^bool put(lsmtree *LSM,KEYT key, char *value){$/;"	f
q	lsmtree/lsmtree_org.c	/^Queue *q;$/;"	v
q	lsmtree_org.c	/^Queue *q;$/;"	v
qlock	lsmtree/lsmtree_org.c	/^pthread_mutex_t qlock;$/;"	v
qlock	lsmtree_org.c	/^pthread_mutex_t qlock;$/;"	v
queue	queue.h	/^}queue;$/;"	t	typeref:struct:_queue
queue_mutx	request.c	/^pthread_mutex_t queue_mutx = PTHREAD_MUTEX_INITIALIZER;$/;"	v
readcnt	lsmtree.c	/^uint32_t readcnt[LEVELN+2];$/;"	v
readcnt	lsmtree/lsmtree.c	/^uint32_t readcnt[LEVELN+2];$/;"	v
rear	queue.h	/^	nptr rear;$/;"	m	struct:_queue
remove_front	queue.c	/^void* remove_front(queue *qptr){$/;"	f
req	LR_inter.h	/^	req_t *req;$/;"	m	struct:lsmtree_req_t
req	LR_inter.h	/^	req_t *req;\/\/always NULL$/;"	m	struct:lsmtree_gc_req_t
req	lsmtree/LR_inter.h	/^	req_t *req;$/;"	m	struct:lsmtree_req_t
req	lsmtree/LR_inter.h	/^	req_t *req;\/\/always NULL$/;"	m	struct:lsmtree_gc_req_t
req	lsmtree/skiplist.h	/^	struct lsmtree_req_t *req;$/;"	m	struct:snode	typeref:struct:snode::lsmtree_req_t
req	skiplist.h	/^	struct lsmtree_req_t *req;$/;"	m	struct:snode	typeref:struct:snode::lsmtree_req_t
req_lock	lsmtree/threading.h	/^	pthread_mutex_t req_lock;$/;"	m	struct:threadset
req_lock	threading.h	/^	pthread_mutex_t req_lock;$/;"	m	struct:threadset
req_q	lsmtree/threading.h	/^	queue *req_q;$/;"	m	struct:threadset
req_q	threading.h	/^	queue *req_q;$/;"	m	struct:threadset
req_queue	server.c	/^queue *req_queue;$/;"	v
req_t	LR_inter.h	/^typedef struct req_t req_t;$/;"	t	typeref:struct:req_t
req_t	lsmtree/LR_inter.h	/^typedef struct req_t req_t;$/;"	t	typeref:struct:req_t
req_t	request.h	/^typedef struct req_t{$/;"	s
req_t	request.h	/^}req_t;$/;"	t	typeref:struct:req_t
reqs	request.c	/^req_t *reqs[1000] = {0,};$/;"	v
res	LR_inter.h	/^	sktable *res;$/;"	m	struct:lsmtree_gc_req_t
res	LR_inter.h	/^	sktable *res;$/;"	m	struct:lsmtree_req_t
res	lsmtree/LR_inter.h	/^	sktable *res;$/;"	m	struct:lsmtree_gc_req_t
res	lsmtree/LR_inter.h	/^	sktable *res;$/;"	m	struct:lsmtree_req_t
res_lock	lsmtree/threading.h	/^	pthread_mutex_t res_lock;$/;"	m	struct:threadset
res_lock	threading.h	/^	pthread_mutex_t res_lock;$/;"	m	struct:threadset
res_q	lsmtree/threading.h	/^	queue *res_q;$/;"	m	struct:threadset
res_q	threading.h	/^	queue *res_q;$/;"	m	struct:threadset
root	bptree.h	/^	Node *root;$/;"	m	struct:level
root	lsmtree/bptree.h	/^	Node *root;$/;"	m	struct:level
separator	bptree.h	/^	KEYT separator[MAXC];$/;"	m	struct:Node
separator	lsmtree/bptree.h	/^	KEYT separator[MAXC];$/;"	m	struct:Node
seq	request.h	/^	unsigned int seq;$/;"	m	struct:req_t
seq_number	LR_inter.h	/^	uint64_t seq_number;$/;"	m	struct:lsmtree_gc_req_t
seq_number	LR_inter.h	/^	uint64_t seq_number;$/;"	m	struct:lsmtree_req_t
seq_number	lsmtree/LR_inter.h	/^	uint64_t seq_number;$/;"	m	struct:lsmtree_gc_req_t
seq_number	lsmtree/LR_inter.h	/^	uint64_t seq_number;$/;"	m	struct:lsmtree_req_t
size	bptree.h	/^	int size;$/;"	m	struct:level
size	lsmtree/bptree.h	/^	int size;$/;"	m	struct:level
size	lsmtree/skiplist.h	/^	uint64_t size;$/;"	m	struct:skiplist
size	priority_queue.h	/^	int size;$/;"	m	struct:__anon7
size	skiplist.h	/^	uint64_t size;$/;"	m	struct:skiplist
skIterator	lsmtree/skiplist.h	/^typedef struct skIterator{$/;"	s
skIterator	lsmtree/skiplist.h	/^} skIterator;$/;"	t	typeref:struct:skIterator
skIterator	skiplist.h	/^typedef struct skIterator{$/;"	s
skIterator	skiplist.h	/^} skIterator;$/;"	t	typeref:struct:skIterator
sk_from_ths	lsmtree/threading.c	/^sktable *sk_from_ths(threadset* input){\/*$/;"	f
sk_from_ths	threading.c	/^sktable *sk_from_ths(threadset* input){\/*$/;"	f
sk_now_number	lsmtree/threading.h	/^	int sk_now_number;$/;"	m	struct:threadset
sk_now_number	threading.h	/^	int sk_now_number;$/;"	m	struct:threadset
sk_target_number	lsmtree/threading.h	/^	int sk_target_number;$/;"	m	struct:threadset
sk_target_number	threading.h	/^	int sk_target_number;$/;"	m	struct:threadset
skip_data	LR_inter.h	/^	skiplist * skip_data;$/;"	m	struct:lsmtree_gc_req_t
skip_data	lsmtree/LR_inter.h	/^	skiplist * skip_data;$/;"	m	struct:lsmtree_gc_req_t
skiplist	LR_inter.h	/^typedef struct skiplist skiplist;$/;"	t	typeref:struct:skiplist
skiplist	lsmtree/LR_inter.h	/^typedef struct skiplist skiplist;$/;"	t	typeref:struct:skiplist
skiplist	lsmtree/skiplist.h	/^typedef struct skiplist{$/;"	s
skiplist	lsmtree/skiplist.h	/^}skiplist;$/;"	t	typeref:struct:skiplist
skiplist	skiplist.h	/^typedef struct skiplist{$/;"	s
skiplist	skiplist.h	/^}skiplist;$/;"	t	typeref:struct:skiplist
skiplist_cut	lsmtree/skiplist.c	/^skiplist *skiplist_cut(skiplist *list,KEYT num){$/;"	f
skiplist_cut	skiplist.c	/^skiplist *skiplist_cut(skiplist *list,KEYT num){$/;"	f
skiplist_data_read	lsmtree/skiplist.c	/^sktable* skiplist_data_read(sktable *list, KEYT pbn, int fd){\/*$/;"	f
skiplist_data_read	skiplist.c	/^sktable* skiplist_data_read(sktable *list, KEYT pbn, int fd){\/*$/;"	f
skiplist_data_write	lsmtree/skiplist.c	/^int skiplist_data_write(skiplist *data,int fd,lsmtree_gc_req_t * req){$/;"	f
skiplist_data_write	skiplist.c	/^int skiplist_data_write(skiplist *data,int fd,lsmtree_gc_req_t * req){$/;"	f
skiplist_dump	lsmtree/skiplist.c	/^void skiplist_dump(skiplist *list){$/;"	f
skiplist_dump	skiplist.c	/^void skiplist_dump(skiplist *list){$/;"	f
skiplist_ex_value_free	lsmtree/skiplist.c	/^void skiplist_ex_value_free(skiplist *list){$/;"	f
skiplist_ex_value_free	skiplist.c	/^void skiplist_ex_value_free(skiplist *list){$/;"	f
skiplist_find	lsmtree/skiplist.c	/^snode *skiplist_find(skiplist *list, KEYT key){$/;"	f
skiplist_find	skiplist.c	/^snode *skiplist_find(skiplist *list, KEYT key){$/;"	f
skiplist_find_level	lsmtree/skiplist.c	/^static snode * skiplist_find_level(KEYT key, int level, skiplist *list){$/;"	f	file:
skiplist_find_level	skiplist.c	/^static snode * skiplist_find_level(KEYT key, int level, skiplist *list){$/;"	f	file:
skiplist_free	lsmtree/skiplist.c	/^void skiplist_free(skiplist *list){$/;"	f
skiplist_free	skiplist.c	/^void skiplist_free(skiplist *list){$/;"	f
skiplist_init	lsmtree/skiplist.c	/^skiplist *skiplist_init(skiplist *point){$/;"	f
skiplist_init	skiplist.c	/^skiplist *skiplist_init(skiplist *point){$/;"	f
skiplist_insert	lsmtree/skiplist.c	/^snode *skiplist_insert(skiplist *list,KEYT key, char *value, lsmtree_req_t* req,bool flag){$/;"	f
skiplist_insert	skiplist.c	/^snode *skiplist_insert(skiplist *list,KEYT key, char *value, lsmtree_req_t* req,bool flag){$/;"	f
skiplist_keyset_find	lsmtree/skiplist.c	/^keyset *skiplist_keyset_find(sktable *t, KEYT key){$/;"	f
skiplist_keyset_find	skiplist.c	/^keyset *skiplist_keyset_find(sktable *t, KEYT key){$/;"	f
skiplist_keyset_read	lsmtree/skiplist.c	/^bool skiplist_keyset_read(keyset* k,char *res,int fd,lsmtree_req_t *req){$/;"	f
skiplist_keyset_read	skiplist.c	/^bool skiplist_keyset_read(keyset* k,char *res,int fd,lsmtree_req_t *req){$/;"	f
skiplist_meta_free	lsmtree/skiplist.c	/^void skiplist_meta_free(skiplist *list){$/;"	f
skiplist_meta_free	skiplist.c	/^void skiplist_meta_free(skiplist *list){$/;"	f
skiplist_meta_read	lsmtree/skiplist.c	/^sktable *skiplist_meta_read(KEYT pbn, int fd,int seq,lsmtree_req_t *req){$/;"	f
skiplist_meta_read	skiplist.c	/^sktable *skiplist_meta_read(KEYT pbn, int fd,int seq,lsmtree_req_t *req){$/;"	f
skiplist_meta_write	lsmtree/skiplist.c	/^int skiplist_meta_write(skiplist *data,int fd, lsmtree_gc_req_t *req){$/;"	f
skiplist_meta_write	skiplist.c	/^int skiplist_meta_write(skiplist *data,int fd, lsmtree_gc_req_t *req){$/;"	f
skiplist_pop	lsmtree/skiplist.c	/^snode *skiplist_pop(skiplist *list){$/;"	f
skiplist_pop	skiplist.c	/^snode *skiplist_pop(skiplist *list){$/;"	f
skiplist_read	lsmtree/skiplist.c	/^sktable *skiplist_read(KEYT pbn, int hfd, int dfd){$/;"	f
skiplist_read	skiplist.c	/^sktable *skiplist_read(KEYT pbn, int hfd, int dfd){$/;"	f
skiplist_sktable_free	lsmtree/skiplist.c	/^void skiplist_sktable_free(sktable *f){$/;"	f
skiplist_sktable_free	skiplist.c	/^void skiplist_sktable_free(sktable *f){$/;"	f
skiplist_write	lsmtree/skiplist.c	/^int skiplist_write(skiplist *data, lsmtree_gc_req_t * req,int hfd,int dfd){$/;"	f
skiplist_write	skiplist.c	/^int skiplist_write(skiplist *data, lsmtree_gc_req_t * req,int hfd,int dfd){$/;"	f
sktable	LR_inter.h	/^typedef struct sktable sktable;$/;"	t	typeref:struct:sktable
sktable	lsmtree/LR_inter.h	/^typedef struct sktable sktable;$/;"	t	typeref:struct:sktable
sktable	lsmtree/skiplist.h	/^typedef struct sktable{$/;"	s
sktable	lsmtree/skiplist.h	/^}sktable;$/;"	t	typeref:struct:sktable
sktable	skiplist.h	/^typedef struct sktable{$/;"	s
sktable	skiplist.h	/^}sktable;$/;"	t	typeref:struct:sktable
snode	lsmtree/skiplist.h	/^typedef struct snode{$/;"	s
snode	lsmtree/skiplist.h	/^}snode;$/;"	t	typeref:struct:snode
snode	skiplist.h	/^typedef struct snode{$/;"	s
snode	skiplist.h	/^}snode;$/;"	t	typeref:struct:snode
snode_init	lsmtree/skiplist.c	/^snode *snode_init(snode *node){$/;"	f
snode_init	skiplist.c	/^snode *snode_init(snode *node){$/;"	f
sst_lock	lsmtree.c	/^pthread_mutex_t sst_lock;$/;"	v
sst_lock	lsmtree/lsmtree.c	/^pthread_mutex_t sst_lock;$/;"	v
sstable	lsmtree.h	/^	skiplist *sstable;$/;"	m	struct:lsmtree
sstable	lsmtree/lsmtree.h	/^	skiplist *sstable;$/;"	m	struct:lsmtree
sstcheck	lsmtree/lsmtree_org.c	/^int sstcheck;$/;"	v
sstcheck	lsmtree_org.c	/^int sstcheck;$/;"	v
start	lsmtree/measure.h	/^	struct timeval start,end;$/;"	m	struct:linktime	typeref:struct:linktime::timeval
start	lsmtree/skiplist.h	/^	KEYT start,end;$/;"	m	struct:skiplist
start	measure.h	/^	struct timeval start,end;$/;"	m	struct:linktime	typeref:struct:linktime::timeval
start	request.c	/^int start = 0, end = 0;$/;"	v
start	skiplist.h	/^	KEYT start,end;$/;"	m	struct:skiplist
table	lsmtree.h	/^typedef struct table{$/;"	s
table	lsmtree.h	/^}table;$/;"	t	typeref:struct:table
table	lsmtree/lsmtree.h	/^typedef struct table{$/;"	s
table	lsmtree/lsmtree.h	/^}table;$/;"	t	typeref:struct:table
target_number	LR_inter.h	/^	uint64_t target_number;$/;"	m	struct:lsmtree_gc_req_t
target_number	LR_inter.h	/^	uint64_t target_number;$/;"	m	struct:lsmtree_req_t
target_number	lsmtree/LR_inter.h	/^	uint64_t target_number;$/;"	m	struct:lsmtree_gc_req_t
target_number	lsmtree/LR_inter.h	/^	uint64_t target_number;$/;"	m	struct:lsmtree_req_t
terminate	lsmtree/threading.h	/^	pthread_mutex_t terminate;$/;"	m	struct:threading
terminate	threading.h	/^	pthread_mutex_t terminate;$/;"	m	struct:threading
terminateflag	lsmtree/threading.h	/^	bool terminateflag;$/;"	m	struct:threading
terminateflag	threading.h	/^	bool terminateflag;$/;"	m	struct:threading
th_cnt_lock	lsmtree/threading.h	/^	pthread_mutex_t th_cnt_lock;$/;"	m	struct:threadset
th_cnt_lock	threading.h	/^	pthread_mutex_t th_cnt_lock;$/;"	m	struct:threadset
thread_gc_main	lsmtree/threading.c	/^void* thread_gc_main(void *input){$/;"	f
thread_gc_main	threading.c	/^void* thread_gc_main(void *input){$/;"	f
thread_get	lsmtree.c	/^int thread_get(lsmtree *LSM, KEYT key, threading *input, char *ret,lsmtree_req_t* req){$/;"	f
thread_get	lsmtree/lsmtree.c	/^int thread_get(lsmtree *LSM, KEYT key, threading *input, char *ret,lsmtree_req_t* req){$/;"	f
thread_header_read	lsmtree/lsmtree_org.c	/^void *thread_header_read(void *input){$/;"	f
thread_header_read	lsmtree_org.c	/^void *thread_header_read(void *input){$/;"	f
thread_main	lsmtree/threading.c	/^void* thread_main(void *input){$/;"	f
thread_main	threading.c	/^void* thread_main(void *input){$/;"	f
threading	lsmtree.h	/^typedef struct threading threading;$/;"	t	typeref:struct:threading
threading	lsmtree/lsmtree.h	/^typedef struct threading threading;$/;"	t	typeref:struct:threading
threading	lsmtree/threading.h	/^typedef struct threading{$/;"	s
threading	lsmtree/threading.h	/^}threading;$/;"	t	typeref:struct:threading
threading	threading.h	/^typedef struct threading{$/;"	s
threading	threading.h	/^}threading;$/;"	t	typeref:struct:threading
threading_clear	lsmtree/threading.c	/^void threading_clear(threading *input){$/;"	f
threading_clear	threading.c	/^void threading_clear(threading *input){$/;"	f
threading_init	lsmtree/threading.c	/^void threading_init(threading *input){$/;"	f
threading_init	threading.c	/^void threading_init(threading *input){$/;"	f
threads	lsmtree/threading.h	/^	threading threads[THREADNUM];$/;"	m	struct:threadset
threads	threading.h	/^	threading threads[THREADNUM];$/;"	m	struct:threadset
threadset	lsmtree/threading.h	/^typedef struct threadset{$/;"	s
threadset	lsmtree/threading.h	/^}threadset;$/;"	t	typeref:struct:threadset
threadset	threading.h	/^typedef struct threadset{$/;"	s
threadset	threading.h	/^}threadset;$/;"	t	typeref:struct:threadset
threadset_assign	lsmtree/threading.c	/^void threadset_assign(threadset* input, lsmtree_req_t *req){$/;"	f
threadset_assign	threading.c	/^void threadset_assign(threadset* input, lsmtree_req_t *req){$/;"	f
threadset_clear	lsmtree/threading.c	/^void threadset_clear(threadset *input){$/;"	f
threadset_clear	threading.c	/^void threadset_clear(threadset *input){$/;"	f
threadset_end	lsmtree/threading.c	/^void threadset_end(threadset *input){$/;"	f
threadset_end	threading.c	/^void threadset_end(threadset *input){$/;"	f
threadset_gc_assign	lsmtree/threading.c	/^void threadset_gc_assign(threadset* input ,lsmtree_gc_req_t *req){$/;"	f
threadset_gc_assign	threading.c	/^void threadset_gc_assign(threadset* input ,lsmtree_gc_req_t *req){$/;"	f
threadset_gc_wait	lsmtree/threading.c	/^void threadset_gc_wait(threadset *input){$/;"	f
threadset_gc_wait	threading.c	/^void threadset_gc_wait(threadset *input){$/;"	f
threadset_init	lsmtree/threading.c	/^void threadset_init(threadset* input){$/;"	f
threadset_init	threading.c	/^void threadset_init(threadset* input){$/;"	f
threadset_request_wait	lsmtree/threading.c	/^void threadset_request_wait(threadset *input){$/;"	f
threadset_request_wait	threading.c	/^void threadset_request_wait(threadset *input){$/;"	f
threadset_start	lsmtree/threading.c	/^void threadset_start(threadset* input){$/;"	f
threadset_start	threading.c	/^void threadset_start(threadset* input){$/;"	f
tlb	lsmtree.h	/^	table tlb;$/;"	m	struct:lsmtree
tlb	lsmtree/lsmtree.h	/^	table tlb;$/;"	m	struct:lsmtree
true	lsmtree/utils.h	/^typedef enum{false,true} bool;$/;"	e	enum:__anon5
true	utils.h	/^typedef enum{false,true} bool;$/;"	e	enum:__anon8
type	request.h	/^	char type;$/;"	m	struct:__anon2
type_info	request.h	/^	Type_info *type_info;$/;"	m	struct:req_t
type_str	request.h	/^	char type_str[10];$/;"	m	struct:__anon2
valid	request.h	/^	char valid;$/;"	m	struct:__anon1
valid	request.h	/^	char valid;$/;"	m	struct:__anon2
valid	request.h	/^	char valid;$/;"	m	struct:__anon3
valid	request.h	/^	char valid;$/;"	m	struct:__anon4
value	lsmtree/skiplist.h	/^	char *value;$/;"	m	struct:sktable
value	lsmtree/skiplist.h	/^	char *value;$/;"	m	struct:snode
value	queue.h	/^	void *value;$/;"	m	struct:_node
value	request.h	/^	char* value;$/;"	m	struct:__anon4
value	skiplist.h	/^	char *value;$/;"	m	struct:sktable
value	skiplist.h	/^	char *value;$/;"	m	struct:snode
value_info	request.h	/^	Value_info *value_info;$/;"	m	struct:req_t
version	bptree.h	/^	KEYT version;$/;"	m	struct:Entry
version	bptree.h	/^	KEYT version;$/;"	m	struct:level
version	lsmtree/bptree.h	/^	KEYT version;$/;"	m	struct:Entry
version	lsmtree/bptree.h	/^	KEYT version;$/;"	m	struct:level
where_am_i	lsmtree/lsmtree_org.c	/^int where_am_i;$/;"	v
where_am_i	lsmtree_org.c	/^int where_am_i;$/;"	v
work_on_accept	server.c	/^void* work_on_accept(void *arg) {$/;"	f
write_data	lsmtree.c	/^int write_data(lsmtree *LSM,skiplist *data,lsmtree_gc_req_t* req){$/;"	f
write_data	lsmtree/lsmtree.c	/^int write_data(lsmtree *LSM,skiplist *data,lsmtree_gc_req_t* req){$/;"	f
write_data	lsmtree/lsmtree_org.c	/^int write_data(lsmtree *LSM,skiplist *data){$/;"	f
write_data	lsmtree_org.c	/^int write_data(lsmtree *LSM,skiplist *data){$/;"	f
write_meta_only	lsmtree.c	/^int write_meta_only(lsmtree *LSM, skiplist *data,lsmtree_gc_req_t * input){$/;"	f
write_meta_only	lsmtree/lsmtree.c	/^int write_meta_only(lsmtree *LSM, skiplist *data,lsmtree_gc_req_t * input){$/;"	f
write_meta_only	lsmtree/lsmtree_org.c	/^int write_meta_only(lsmtree *LSM, skiplist *data){$/;"	f
write_meta_only	lsmtree_org.c	/^int write_meta_only(lsmtree *LSM, skiplist *data){$/;"	f
